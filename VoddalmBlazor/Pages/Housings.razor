@page "/"
@using System.Net.Http
@using System.Text.Json
@using VoddalmBlazor.Models
@inject HttpClient httpClient

<!-- Author Kim Jonsson // -->

<div class="filters">
    <input type="text" placeholder="Search" @bind="searchTerm" @oninput="FilterHousings" />

    <div class="filter-group">
        <label for="municipality">Municipalities:</label>
        <div class="filter-options" id="municipality">
            @foreach (var municipality in municipalities)
            {
                <label>
                    <input type="checkbox" value="@municipality" @onchange="@(e => ToggleMunicipalityFilter(municipality, e))" /> @municipality
                </label>
            }
        </div>
    </div>

    <div class="filter-group">
        <label for="category">Categories:</label>
        <div class="filter-options" id="category">
            @foreach (var category in categories)
            {
                <label>
                    <input type="checkbox" value="@category" @onchange="@(e => ToggleCategoryFilter(category, e))" /> @category
                </label>
            }
        </div>
    </div>
</div>

@if (housingList == null)
{
    <p>Loading...</p>
}
else
{
    <div class="housing-list">
        @foreach (var housing in GetFilteredHousings().Where(h => h.IsActive))
        {
            <div class="housing-item">
                <a href="HousingDetails/@housing.id.ToString()">
                    <div class="card-container">
                        <div class="image-container">
                            @if (housing.images.Any())
                            {
                                <img src="@housing.images.First()" alt="Housing Image" />
                            }
                            else
                            {
                                <img src="placeholder.jpg" alt="No Image Available" />
                            }
                        </div>
                        <div class="info-container">
                            <ul>
                                <li><strong>Address:</strong> <span>@housing.address</span></li>
                                <li><strong>Initial Price:</strong> <span>@housing.initialPrice</span></li>
                                <li><strong>Living Area:</strong> <span>@housing.livingArea</span></li>
                                <li><strong>Agency:</strong> <a href="AgencyDetails/@housing.broker.agency.id.ToString()">@housing.broker.agency.name</a></li>

                                <li><strong>Broker:</strong> <a href="BrokerDetails/@housing.broker.id">@housing.broker.firstName @housing.broker.lastName</a></li>
                            </ul>
                            @if (!string.IsNullOrEmpty(housing.broker.agency.logoUrl))
                            {
                                <img src="@housing.broker.agency.logoUrl" alt="Agency Logo" class="agency-logo" />
                            }
                        </div>
                    </div>
                </a>
            </div>
        }
    </div>
}

@code {
    private List<Housing> housingList;
    private List<Broker> brokerList;
    private List<Agency> agencyList;
    private string searchTerm = "";
    private List<string> selectedMunicipalities = new List<string>();
    private List<string> selectedCategories = new List<string>();
    private string[] municipalities = { "Ale", "Alingsås", "Alvesta", "Aneby", "Arboga" };
    private string[] categories = { "Apartment", "Villas", "New production", "Leisure house" };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch data for housings
            housingList = await httpClient.GetFromJsonAsync<List<Housing>>("https://localhost:7046/api/Housings");

            // Fetch data for brokers
            brokerList = await httpClient.GetFromJsonAsync<List<Broker>>("https://localhost:7046/api/Broker");

            // Fetch data for agencies
            agencyList = await httpClient.GetFromJsonAsync<List<Agency>>("https://localhost:7046/api/Agency");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private IEnumerable<Housing> GetFilteredHousings()
    {
        var filtered = housingList;

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(h =>
                h.id.ToString().Contains(searchTerm) ||
                h.address.Contains(searchTerm) ||
                h.initialPrice.ToString().Contains(searchTerm) ||
                h.livingArea.ToString().Contains(searchTerm) ||
                h.broker.agency.name.Contains(searchTerm) ||
                h.broker.firstName.Contains(searchTerm) ||
                h.broker.lastName.Contains(searchTerm) ||
                h.municipality.name.Contains(searchTerm) ||
                h.category.name.Contains(searchTerm)
            ).ToList();
        }

        if (selectedMunicipalities.Any())
        {
            filtered = filtered.Where(h => selectedMunicipalities.Contains(h.municipality.name)).ToList();
        }

        if (selectedCategories.Any())
        {
            filtered = filtered.Where(h => selectedCategories.Contains(h.category.name)).ToList();
        }

        return filtered;
    }

    private void ToggleMunicipalityFilter(string municipality, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            if (!selectedMunicipalities.Contains(municipality))
            {
                selectedMunicipalities.Add(municipality);
            }
        }
        else
        {
            selectedMunicipalities.Remove(municipality);
        }
        FilterHousings();
    }

    private void ToggleCategoryFilter(string category, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            if (!selectedCategories.Contains(category))
            {
                selectedCategories.Add(category);
            }
        }
        else
        {
            selectedCategories.Remove(category);
        }
        FilterHousings();
    }

    private void FilterHousings()
    {
        StateHasChanged();
    }
}
