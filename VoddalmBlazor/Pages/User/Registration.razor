@page "/register"
@using VoddalmBlazor.Models
@using BlazorWasmAuthentication.Services
@using VoddalmBlazor.Services.Base
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

@* Define the property to store the list of agencies *@


<div class="register-container">
    <EditForm Model="@registerModel" OnValidSubmit="RegisterAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="FirstName">First Name:</label>
            <InputText @bind-Value="@registerModel.FirstName" id="FirstName" name="FirstName" required />
            <ValidationMessage For="@(() => registerModel.FirstName)" />
        </div>

        <div class="form-group">
            <label for="LastName">Last Name:</label>
            <InputText @bind-Value="@registerModel.LastName" id="LastName" name="LastName" required />
            <ValidationMessage For="@(() => registerModel.LastName)" />
        </div>

        <div class="form-group">
            <label for="Email">Email:</label>
            <InputText @bind-Value="@registerModel.Email" id="Email" name="Email" required />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="form-group">
            <label for="PhoneNumber">Phone Number:</label>
            <InputText @bind-Value="@registerModel.PhoneNumber" id="PhoneNumber" name="PhoneNumber" required />
            <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
        </div>

        <div class="form-group">
            <label for="Password">Password:</label>
            <InputText @bind-Value="@registerModel.Password" id="Password" name="Password" type="password" required />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group">
            <label for="ConfirmPassword">Confirm Password:</label>
            <InputText @bind-Value="@registerModel.ConfirmPassword" id="ConfirmPassword" name="ConfirmPassword" type="password" required />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
        </div>

        <div class="form-group">
            <label for="AgencyId">Agency:</label>
            <select @bind="registerModel.AgencyId" id="AgencyId" name="AgencyId" class="form-control">

                <option value="">Select an agency</option>
                @foreach (var agency in agencyList)
                {
                    <option value="@agency.Id">@agency.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => registerModel.AgencyId)" />
        </div>

        <div>
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error">@errorMessage</p>
}
@code {
    List<Agency> agencyList = new List<Agency>();
    UserDTO registerModel = new UserDTO();
    string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the list of agencies from the API
        agencyList = await httpClient.GetFromJsonAsync<List<Agency>>("https://localhost:7046/api/Agency/");
    }

    private async Task RegisterAsync()
    {
        try
        {
            // Call the registration endpoint
            var response = await httpClient.PostAsJsonAsync("https://localhost:7046/api/Account/register", registerModel);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Registration failed. Please try again.";
                return;
            }

            // Registration successful, navigate to login page
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}