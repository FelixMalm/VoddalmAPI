@page "/register"
@using VoddalmBlazor.Models
@using BlazorWasmAuthentication.Services
@using VoddalmBlazor.Services.Base
@inject IClient httpClient
@* @inject IAuthenticationService AuthenticationService *@
@inject NavigationManager NavigationManager

<!-- Author Felix Malm -->

<EditForm Model="@registerModel" OnValidSubmit="RegisterAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="Name">Name:</label>
        <InputText type="Name" @bind-Value="@registerModel.Name" id="Name" name="Name" required />
        <ValidationMessage For="@(() => registerModel.Name)" />
    </div>
    <div>
        <label for="Email">Email:</label>
        <InputText @bind-Value="@registerModel.Email" id="Email" name="Email" required />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText type="password" @bind-Value="@registerModel.Password" id="password" name="password" required />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>
    <div>
        <label for="ConfirmPassword">ConfirmPassword:</label>
        <InputText type="password" @bind-Value="@registerModel.ConfirmPassword" id="ConfirmPassword" name="ConfirmPassword" required />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>
    <div>
        <button type="submit">Register</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error">@errorMessage</p>
}

@code {
    UserDTO registerModel = new UserDTO();
    string errorMessage;

    private async Task RegisterAsync()
    {
        try
        {
            await httpClient.RegisterAsync(registerModel);
            //NavigateToLogin();
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}