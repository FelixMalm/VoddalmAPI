@page "/brokerLoggedIn"
@using System.Net.Http
@using System.Net.Http.Headers;
@using System.Text.Json
@using VoddalmBlazor.Models
@using Blazored.LocalStorage;
@using System.Security.Claims;
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
<!-- Author Kim Jonsson -->

<h3>My Information</h3>

@if (broker != null)
{
    <div class="container">
        <div class="row">
            <!-- Image of the logged-in broker -->
            <div class="col-md-4 mb-3">
                <img src="@broker.imageUrl" alt="Broker Image" class="img-fluid rounded-circle">
            </div>

            <!-- Input fields for broker properties -->
            <div class="col-md-8">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" class="form-control" id="firstName" @bind="broker.firstName" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" class="form-control" id="lastName" @bind="broker.lastName" required>
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" @bind="broker.email" required>
                </div>
                <div class="form-group">
                    <label for="phoneNumber">Phone Number</label>
                    <input type="tel" class="form-control" id="phoneNumber" @bind="broker.phoneNumber" required>
                </div>
                <div class="form-group">
                    <label for="imageUrl">Image URL</label>
                    <input type="text" class="form-control" id="imageUrl" @bind="broker.imageUrl">

                    <button class="btn btn-primary" @onclick="UpdateBroker">Update Information</button>
                    <a class="btn btn-primary mr-2" href="/AddHouse?BrokerId=@broker.id">Add new housing</a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Broker information not available.</p>
}

<hr />

@if (associatedHousings != null && associatedHousings.Any())
{
    var activeHousings = associatedHousings.Where(h => h.IsActive);
    var inactiveHousings = associatedHousings.Where(h => !h.IsActive);

    @if (activeHousings.Any())
    {
        <h4>Active Housings</h4>
        <div class="associated-housings housing-grid">
            <div class="row">
                @foreach (var housingItem in activeHousings)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card housing-item">
                            <img src="@housingItem.images.FirstOrDefault()" class="card-img-top" alt="Housing Image">
                            <div class="card-body housing-info">
                                <h5 class="card-title">
                                    <!-- Wrapped housing address in <a> tag -->
                                    <a href="/HousingDetails/@housingItem.id">@housingItem.address</a>
                                </h5>
                                <div class="button-group">
                                    <!-- Update button -->
                                    <a class="btn btn-primary mr-2" href="/updateHousing/@housingItem.id">Update</a>
                                    <!-- Delete button -->
                                    <a class="btn btn-danger" href="/deleteHousing/@housingItem.id">Delete</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    <hr />

    <h4>Old Objects</h4>

    @if (inactiveHousings.Any())
    {
        
        <div class="associated-housings housing-grid">
            <div class="row">
                @foreach (var housingItem in inactiveHousings)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card housing-item">
                            <img src="@housingItem.images.FirstOrDefault()" class="card-img-top" alt="Housing Image">
                            <div class="card-body housing-info">
                                <h5 class="card-title">
                                    <!-- Wrapped housing address in <a> tag -->
                                    <a href="/HousingDetails/@housingItem.id">@housingItem.address</a>
                                </h5>
                                <p>This housing is currently inactive.</p>
                                <button class="btn btn-primary" @onclick="() => ActivateHousing(housingItem)">Restore</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>No inactive housings found.</p>
    }
}
else
{
    <p>No housing objects found.</p>
}



@code {
    private Broker broker;
    private List<Housing> associatedHousings;

    private async Task ActivateHousing(Housing housing)
    {
        try
        {
            housing.IsActive = true;

            HttpResponseMessage response = await httpClient.PutAsJsonAsync($"https://localhost:7046/api/Housings/{housing.id}", housing);
            response.EnsureSuccessStatusCode();

            // Refresh the page or update the list of housings
            // For simplicity, you can reload the page
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error activating housing: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Retrieve token, email, and user id from local storage
            var token = await localStorage.GetItemAsStringAsync("Token");
            var email = await localStorage.GetItemAsStringAsync("Email");
            var userId = await localStorage.GetItemAsStringAsync("UserId");

            // Use the token, email, and user id to identify the logged-in broker
            if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(userId))
            {
                // Make sure to pass the token in the request header
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var brokerList = await httpClient.GetFromJsonAsync<List<Broker>>("https://localhost:7046/api/Broker");
                if (brokerList != null)
                {
                    // Find the logged-in broker using the email or user id
                    broker = brokerList.FirstOrDefault(b => b.email == email || b.id == userId);

                    if (broker != null)
                    {
                        var housings = await httpClient.GetFromJsonAsync<List<Housing>>("https://localhost:7046/api/Housings");
                        associatedHousings = housings?.Where(h => h.brokerId == broker.id).ToList();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task UpdateBroker()
    {
        try
        {
            if (broker != null)
            {
                if (string.IsNullOrWhiteSpace(broker.firstName) || string.IsNullOrWhiteSpace(broker.lastName) || string.IsNullOrWhiteSpace(broker.email))
                {
                    Console.WriteLine("Broker object contains invalid data.");
                    return;
                }

                var brokerId = broker.id;
                var apiUrl = $"https://localhost:7046/api/Broker/{brokerId}";

                HttpResponseMessage response = await httpClient.PutAsJsonAsync(apiUrl, broker);
                response.EnsureSuccessStatusCode();

                // Navigate to the specified URL after successful update
            }
            else
            {
                Console.WriteLine("Broker object is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating broker: {ex.Message}");
        }
    }
}