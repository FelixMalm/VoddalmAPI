@page "/brokerLoggedIn"
@using System.Net.Http
@using System.Text.Json
@using VoddalmBlazor.Models
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
<!-- Author Kim Jonsson -->

<h3>My Information</h3>

@if (broker != null)
{
    <div class="container">
        <!-- Input fields for broker properties -->
        <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" class="form-control" id="firstName" @bind="broker.firstName" required>
        </div>
        <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" class="form-control" id="lastName" @bind="broker.lastName" required>
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" @bind="broker.email" required>
        </div>
        <div class="form-group">
            <label for="phoneNumber">Phone Number</label>
            <input type="tel" class="form-control" id="phoneNumber" @bind="broker.phoneNumber" required>
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL</label>
            <input type="text" class="form-control" id="imageUrl" @bind="broker.imageUrl">

            <button class="btn btn-primary" @onclick="UpdateBroker">Update Broker</button>
        </div>
    </div>
}
else
{
    <p>Broker information not available.</p>
}

<h3>Add New Housing</h3>
<div>
    @if (broker != null)
    {
        <a class="btn btn-primary mr-2" href="/AddHouse?BrokerId=@broker.id">Add new housing</a>
    }
    else
    {
        <p>Broker information not available.</p>
    }
</div>

<h3>My Housing Objects</h3>

@if (associatedHousings != null && associatedHousings.Any())
{
    var activeHousings = associatedHousings.Where(h => h.IsActive);
    var inactiveHousings = associatedHousings.Where(h => !h.IsActive);

    @if (activeHousings.Any())
    {
        <h3>Active Housings</h3>
        <div class="container">
            <div class="row">
                @foreach (var housingItem in activeHousings)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <img src="@housingItem.images.FirstOrDefault()" class="card-img-top" alt="Housing Image">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <!-- Housing address link -->
                                    <a href="UpdateHousing/@housingItem.id">@housingItem.address</a>
                                </h5>
                                <div>
                                    <!-- Update button -->
                                    <a class="btn btn-primary mr-2" href="/updateHousing/@housingItem.id">Update</a>

                                    <!-- Delete button -->
                                    <a class="btn btn-danger mr-2" href="/deleteHousing/@housingItem.id">Delete</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <h3>Old Objects</h3>

    @if (inactiveHousings.Any())
    {
        <h3>Inactive Housings</h3>
        <div class="container">
            <div class="row">
                @foreach (var housingItem in inactiveHousings)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <img src="@housingItem.images.FirstOrDefault()" class="card-img-top" alt="Housing Image">
                            <div class="card-body">
                                <h5 class="card-title">@housingItem.address</h5>
                                <p>This housing is currently inactive.</p>
                                <!-- Button to activate housing -->
                                <button class="btn btn-primary" @onclick="() => ActivateHousing(housingItem)">Restore</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>No inactive housings found.</p>
    }

}
else
{
    <p>No housing objects found.</p>
}

@code {
    private Broker broker;
    private List<Housing> associatedHousings;

    private async Task ActivateHousing(Housing housing)
    {
        try
        {
            housing.IsActive = true;

            HttpResponseMessage response = await httpClient.PutAsJsonAsync($"https://localhost:7046/api/Housings/{housing.id}", housing);
            response.EnsureSuccessStatusCode();

            // Refresh the page or update the list of housings
            // For simplicity, you can reload the page
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error activating housing: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var brokerList = await httpClient.GetFromJsonAsync<List<Broker>>("https://localhost:7046/api/Broker");
            if (brokerList != null && brokerList.Count >= 4)
            {
                broker = brokerList[3];
                if (broker != null)
                {
                    var housings = await httpClient.GetFromJsonAsync<List<Housing>>("https://localhost:7046/api/Housings");
                    associatedHousings = housings?.Where(h => h.brokerId == broker.id).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task UpdateBroker()
    {
        try
        {
            if (broker != null)
            {
                if (string.IsNullOrWhiteSpace(broker.firstName) || string.IsNullOrWhiteSpace(broker.lastName) || string.IsNullOrWhiteSpace(broker.email))
                {
                    Console.WriteLine("Broker object contains invalid data.");
                    return;
                }

                var brokerId = broker.id;
                var apiUrl = $"https://localhost:7046/api/Broker/{brokerId}";

                HttpResponseMessage response = await httpClient.PutAsJsonAsync(apiUrl, broker);
                response.EnsureSuccessStatusCode();

                // Navigate to the specified URL after successful update
            }
            else
            {
                Console.WriteLine("Broker object is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating broker: {ex.Message}");
        }
    }
}